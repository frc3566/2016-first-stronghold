// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.LaserSystem;

import org.usfirst.frc3566.LaserSystem.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton cAN2HRotationRight;
    public JoystickButton cAN2HRotationLeft;
    public JoystickButton cAN3VRotationUp;
    public JoystickButton cAN3VRotationDown;
    public JoystickButton fireLASER;
    public JoystickButton reloadButton;
    public Joystick logitechXBoxType;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        logitechXBoxType = new Joystick(0);
        
        reloadButton = new JoystickButton(logitechXBoxType, 6);
        reloadButton.whenPressed(new Reload());
        fireLASER = new JoystickButton(logitechXBoxType, 5);
        fireLASER.whenPressed(new TriggerFire());
        cAN3VRotationDown = new JoystickButton(logitechXBoxType, 1);
        cAN3VRotationDown.whileHeld(new VRotationDown());
        cAN3VRotationUp = new JoystickButton(logitechXBoxType, 4);
        cAN3VRotationUp.whileHeld(new VRotationUp());
        cAN2HRotationLeft = new JoystickButton(logitechXBoxType, 3);
        cAN2HRotationLeft.whileHeld(new HRotationLeft());
        cAN2HRotationRight = new JoystickButton(logitechXBoxType, 2);
        cAN2HRotationRight.whileHeld(new HRotationRight());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("LaserJoysticks", new LaserJoysticks());

        SmartDashboard.putData("HRotationRight", new HRotationRight());

        SmartDashboard.putData("HRotationLeft", new HRotationLeft());

        SmartDashboard.putData("VRotationUp", new VRotationUp());

        SmartDashboard.putData("VRotationDown", new VRotationDown());

        SmartDashboard.putData("TriggerFire", new TriggerFire());

        SmartDashboard.putData("Reload", new Reload());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLogitechXBoxType() {
        return logitechXBoxType;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

