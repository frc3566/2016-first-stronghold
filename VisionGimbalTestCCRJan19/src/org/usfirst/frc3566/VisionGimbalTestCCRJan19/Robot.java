// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.VisionGimbalTestCCRJan19;

import java.awt.Color;

import javax.swing.JPanel;

import org.usfirst.frc3566.VisionGimbalTestCCRJan19.commands.AutonomousCommand;
import org.usfirst.frc3566.VisionGimbalTestCCRJan19.commands.GimbalLeftHorizontalSweep;
import org.usfirst.frc3566.VisionGimbalTestCCRJan19.commands.GimbalRightHorizontalSweep;
import org.usfirst.frc3566.VisionGimbalTestCCRJan19.commands.autonomousButtons;
import org.usfirst.frc3566.VisionGimbalTestCCRJan19.commands.getVisionValue;
import org.usfirst.frc3566.VisionGimbalTestCCRJan19.commands.navXValue;
import org.usfirst.frc3566.VisionGimbalTestCCRJan19.commands.runPotentiometer;
import org.usfirst.frc3566.VisionGimbalTestCCRJan19.subsystems.DriveTrain;
import org.usfirst.frc3566.VisionGimbalTestCCRJan19.subsystems.HorizontalGimbalTurning;
import org.usfirst.frc3566.VisionGimbalTestCCRJan19.subsystems.VerticalGimbalTurning;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.NamedSendable;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	  public static NetworkTable table;
    Command autonomousCommand;
    CameraServer mycam;
    navXValue navXValue; 
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static HorizontalGimbalTurning horizontalGimbalTurning;
    public static VerticalGimbalTurning verticalGimbalTurning;
   public static runPotentiometer runPotentiometer;
   public static GimbalLeftHorizontalSweep GimbalLeftHorizontalSweep;
   public static GimbalRightHorizontalSweep GimbalRightHorizontalSweep;
  // public static getAcc getAcc;
   public static getVisionValue getvisionValue;
   public static autonomousButtons autonomousButtons ;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

   JPanel myPanel = new JPanel();
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    
    public Robot() {
    	table = NetworkTable.getTable("GRIP/myContoursReport"); 
    }
    public void robotInit() {
    RobotMap.init();
    
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        horizontalGimbalTurning = new HorizontalGimbalTurning();
        verticalGimbalTurning = new VerticalGimbalTurning();
        myPanel.setSize(100, 100);
        myPanel.setBackground(Color.RED);
        myPanel.
        
        
        

        
    	
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
    	 runPotentiometer= new runPotentiometer();
    	 getvisionValue= new getVisionValue();
    	 autonomousButtons =new autonomousButtons ();
    	 autonomousButtons.start();
    //	autonomousButtons.start();
      //   getAcc= new getAcc();
       oi = new OI();
       mycam = CameraServer.getInstance();
       mycam.setQuality(50);
       mycam.startAutomaticCapture("cam0");
       navXValue = new navXValue(); 
       // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
       
    } 

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
  
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	 //if(Robot.autonomousButtons.portCullisButton.jason==10 && Robot.autonomousButtons.portCullisButton.defense==15 ){
    	if(RobotMap.DEFENSE==1)    {
    	SmartDashboard.putNumber("ITSWnORKING", -3670);
    	    }else {
    	    	SmartDashboard.putNumber("helltro", 700);
    	    }
        Scheduler.getInstance().run();
    }
    
   
    
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
    	   runPotentiometer.start();
    	   getvisionValue.start();
    	//   getAcc.start();
    	   navXValue.start(); 
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
