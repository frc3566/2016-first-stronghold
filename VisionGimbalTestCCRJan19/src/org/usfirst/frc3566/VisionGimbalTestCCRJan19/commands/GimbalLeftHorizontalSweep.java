package org.usfirst.frc3566.VisionGimbalTestCCRJan19.commands;

import org.usfirst.frc3566.VisionGimbalTestCCRJan19.Robot;
import org.usfirst.frc3566.VisionGimbalTestCCRJan19.RobotMap;

import edu.wpi.first.wpilibj.command.Command;

public class GimbalLeftHorizontalSweep extends Command {
	private double timeout=RobotMap.GIMBAL_TIMEOUT;
	private boolean stopornot = false; 
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public GimbalLeftHorizontalSweep() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    public GimbalLeftHorizontalSweep(double timeOut){ // Times out robot if area is a certain value 
    	 /* if (Robot.table.getNumber("area", 1)<0) {
    		timeout = timeOut; 
    		System.out.print("area "+ Robot.table.getNumber("area", 1 ));
        	stopornot=false;
    	} else {
stopornot=true;

    	} */ 
    	timeout=timeOut; 
    	Robot.horizontalGimbalTurning.stopHorizontalGimbal();
    	
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
    	this.setTimeout(timeout); // Time out for the Gimbal 
    	Robot.horizontalGimbalTurning.moveHorizontalLeft(); // Tells the gimbal to move left 
    	/*if(!stopornot){
    	this.setTimeout(timeout);
    	Robot.horizontalGimbalTurning.moveHorizontalLeft();
    	} */

    	//System.out.println("Hi from Gimbal Left command");

    }
   
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return this.isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.horizontalGimbalTurning.stopHorizontalGimbal();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.horizontalGimbalTurning.stopHorizontalGimbal();
    }
}
