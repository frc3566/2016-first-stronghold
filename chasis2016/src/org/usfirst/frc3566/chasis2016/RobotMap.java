// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.chasis2016;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
   
   
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	 public static CANTalon backLeftMotor; //7
	    public static CANTalon backRightMotor; //8
	    public static CANTalon frontLeftMotor; //2
	    public static CANTalon frontRightMotor; //0
	    public static CANTalon frontSteering; //1
	    public static CANTalon backSteering; //3
	    public static CANTalon pickUpBall; //4
	    public static CANTalon horizontalGimbalTurningCAN1GimbalHorizontal;
	    public static CANTalon RulerWrench; //5
	    public static CANTalon catapult; //6
	    public static RobotDrive driveTrainRobot4;
	    public static Servo triggerServo;
	    
	    public static final double GIMBAL_MOTOR_SPEED = 0.25;
	    public static final double WINDOW_MOTOR_SPEED = .6;
	    public static final double POTENTIOMETER_CENTER = 100;
		public static final double GIMBAL_TIMEOUT = 0.1; 
		public static final double BPU_MOTOR_SPEED=1;
		public static final double CATAPULT_SPEED=0.5;

	    public static final double GIMBAL_INERTIA = 28;

	    public static AnalogPotentiometer steeringAnalogPotentiometerFRONT;
	    public static AnalogPotentiometer steeringAnalogPotentiometerBACK;
	    public static AnalogPotentiometer sensorAnalogPotentiometer1;
	    public static AnalogPotentiometer BPUpotentiometer;
	    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
      
       /* driveTrainRobot4.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobot4.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobot4.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveTrainRobot4.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
       */
        
/*
        horizontalGimbalTurningCAN1GimbalHorizontal = new CANTalon(1);
        LiveWindow.addActuator("HorizontalGimbalTurning", "CAN3GimbalHorizontal", horizontalGimbalTurningCAN1GimbalHorizontal);
        
        */

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

      	steeringAnalogPotentiometerFRONT = new AnalogPotentiometer(3,12,0);
      	LiveWindow.addSensor("Steering", "FRONT Steering", steeringAnalogPotentiometerFRONT);
      	
      	steeringAnalogPotentiometerBACK = new AnalogPotentiometer(2,12,0);
      	LiveWindow.addSensor("Steering", "BACK Steering", steeringAnalogPotentiometerBACK);
      

      	BPUpotentiometer = new AnalogPotentiometer(1, 90, 10);
      	LiveWindow.addSensor("BPU", "BPU Potentiometer", BPUpotentiometer);
      	
          backRightMotor = new CANTalon(8);
          LiveWindow.addActuator("Wheels", "Back Right CIM", backRightMotor);
          
          backLeftMotor = new CANTalon(7);
          LiveWindow.addActuator("Wheels", "Back Left CIM", backLeftMotor);
          
          frontLeftMotor = new CANTalon(2);
          LiveWindow.addActuator("Wheels", "Front Left CIM", frontLeftMotor);
          
          frontRightMotor = new CANTalon(0);
          LiveWindow.addActuator("Wheels", "Front Right CIM", frontRightMotor);
          
          frontSteering = new CANTalon(1);
          LiveWindow.addActuator("Steering", "Front Steering SnowBlower", frontSteering);
          
          backSteering = new CANTalon(3);
          LiveWindow.addActuator("Steering", "Back Steering SnowBlower", backSteering);
          
          pickUpBall = new CANTalon(4);
          LiveWindow.addActuator("BPU", "Ball Picker Upper", pickUpBall);
          
          
          driveTrainRobot4 = new RobotDrive (backLeftMotor, frontLeftMotor, backRightMotor, frontRightMotor);
    
    }  
}

